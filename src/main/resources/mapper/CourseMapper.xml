<?xml version="1.0" encoding="UTF-8" ?>
<!--
 2024.9.17 박요한 | getTopRatedCourses 추가
 2024.9.29 박요한 | getPagedCoursesWithRating 추가
-->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.mywork.stitchbe.mapper.CourseMapper">


    <!-- 학원 ID와 코스 ID를 이용해 코스를 조회하는 SQL -->
    <select id="getCourseById" resultType="org.mywork.stitchbe.dto.CourseDTO">
        SELECT * 
        FROM course
        WHERE academy_id = #{academyId} AND course_id = #{courseId}
        
    </select>

    <!-- 강의 ID에 따른 리뷰 목록을 조회하는 쿼리 -->
    <select id="getReviewsByCourseId" resultType="org.mywork.stitchbe.dto.ReviewDTO">
 SELECT review_id AS reviewId, 
               member_id AS memberId, 
               course_id AS courseId, 
               education, 
               education_rating AS educationRating, 
               instructor, 
               instructor_rating AS instructorRating,
               facility, 
               facility_rating AS facilityRating, 
               atmosphere, 
               atmosphere_rating AS atmosphereRating, 
               management, 
               management_rating AS managementRating, 
               later, 
               later_rating AS laterRating, 
               regdate AS regDate, 
               editdate AS editDate
        FROM REVIEW
        WHERE course_id = #{courseId}
    </select>
    
    <!-- 전체선택 -->
    <select id="getAllCourses" resultType="org.mywork.stitchbe.dto.CourseDTO">
    SELECT * FROM course
    </select>

    <!-- 강의 ID로 강의 조회 -->
    <select id="getCourseByCourseId" resultType="org.mywork.stitchbe.dto.CourseDTO">
        SELECT * 
        FROM course
        WHERE course_id = #{courseId}
    </select>

<!-- 학원에 속한 모든 강의를 가져오는 SQL -->
<select id="getCoursesByAcademyId" resultType="org.mywork.stitchbe.dto.CourseDTO">
    SELECT 
        c.course_id, c.course_name, 
        AVG(r.education_rating) AS educationRating, 
        AVG(r.instructor_rating) AS instructorRating,
        AVG(r.facility_rating) AS facilityRating,
        AVG(r.atmosphere_rating) AS atmosphereRating,
        AVG(r.management_rating) AS managementRating,
        AVG(r.later_rating) AS laterRating
    FROM courses c
    LEFT JOIN reviews r ON c.course_id = r.course_id
    WHERE c.academy_id = #{academyId}
    GROUP BY c.course_id
</select>

    <!-- 박요한 -->
    <!-- 리팩토링: 전체 강의 목록 + 페이지네이션, 정렬 -->
    <select id="getPagedCoursesWithRating" resultType="org.mywork.stitchbe.dto.CourseDTO">
        SELECT
            c.course_id AS courseId,
            c.course_name AS courseName,
            c.SESSION_NUMBER AS sessionNumber,
            TO_CHAR(c.start_date, 'YYYY. MM. DD') AS startDate,
            TO_CHAR(c.end_date, 'YYYY. MM. DD') AS endDate,
            c.academy_id AS academyId,
            a.ACADEMY_NAME as academyName,

            -- 전체 평점 합 / 전체 리뷰 수
            SUM(r.education_rating + r.instructor_rating + r.facility_rating +
                r.atmosphere_rating + r.management_rating + r.later_rating) /
            (COUNT(r.review_id) * 6) AS averageRating

        FROM course c
                 LEFT JOIN review r ON c.course_id = r.course_id
                 LEFT JOIN academy a ON c.academy_id = a.academy_id
        GROUP BY
            c.course_id,
            c.course_name,
            c.session_number,
            c.start_date,
            c.end_date,
            c.academy_id,
            a.ACADEMY_NAME
        ORDER BY averageRating DESC NULLS LAST
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>


    <!-- 홈: 강의와 리뷰 데이터를 조인해서 6개 항목별 평균 평점을 가져오는 쿼리 -->
    <select id="getTopRatedCourses" resultType="org.mywork.stitchbe.dto.home.CourseReviewDTO">
        SELECT
            c.course_id AS courseId, c.course_name AS courseName, c.SESSION_NUMBER AS sessionNumber,
            TO_CHAR(c.start_date, 'YYYY. MM. DD') AS startDate, TO_CHAR(c.end_date, 'YYYY. MM. DD') AS endDate,
            c.academy_id AS academyId, a.ACADEMY_NAME as academyName,

            -- 전체 평점 합 / 전체 리뷰 수
            SUM(r.education_rating + r.instructor_rating + r.facility_rating +
                r.atmosphere_rating + r.management_rating + r.later_rating) /
            (COUNT(r.review_id) * 6) AS averageRating,

            -- 각 항목별 평균
            AVG(r.education_rating) AS educationRating,
            AVG(r.instructor_rating) AS instructorRating,
            AVG(r.facility_rating) AS facilityRating,
            AVG(r.atmosphere_rating) AS atmosphereRating,
            AVG(r.management_rating) AS managementRating,
            AVG(r.later_rating) AS laterRating

        FROM course c
                 LEFT JOIN review r ON c.course_id = r.course_id
                 LEFT JOIN academy a ON c.academy_id = a.academy_id
        GROUP BY c.course_id, c.course_name, c.session_number, c.start_date, c.end_date, c.academy_id, a.ACADEMY_NAME
        ORDER BY averageRating DESC NULLS LAST
            FETCH FIRST 5 ROWS ONLY
    </select>

</mapper>