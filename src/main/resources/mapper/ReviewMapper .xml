<?xml version="1.0" encoding="UTF-8" ?>
<!-- 2024.9.17 박요한 | getTopLikedReviews 추가 -->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.mywork.stitchbe.mapper.ReviewMapper">

	<!-- 리뷰 삽입 -->
	<insert id="insertReview"
		parameterType="org.mywork.stitchbe.dto.ReviewDTO">
		INSERT INTO REVIEW (
		review_id, member_id, course_id, education, education_rating, instructor,
		instructor_rating,
		facility, facility_rating, atmosphere, atmosphere_rating, management,
		management_rating,
		later, later_rating, regdate, editdate
		) VALUES (
		REVIEW_SEQ.NEXTVAL,
		#{memberId, jdbcType=VARCHAR},
		#{courseId, jdbcType=NUMERIC},
		#{education, jdbcType=VARCHAR},
		#{educationRating, jdbcType=NUMERIC},
		#{instructor, jdbcType=VARCHAR},
		#{instructorRating, jdbcType=NUMERIC},
		#{facility, jdbcType=VARCHAR},
		#{facilityRating, jdbcType=NUMERIC},
		#{atmosphere, jdbcType=VARCHAR},
		#{atmosphereRating, jdbcType=NUMERIC},
		#{management, jdbcType=VARCHAR},
		#{managementRating, jdbcType=NUMERIC},
		#{later, jdbcType=VARCHAR},
		#{laterRating, jdbcType=NUMERIC},
		#{regDate, jdbcType=TIMESTAMP},
		#{editDate, jdbcType=TIMESTAMP}
		)
	</insert>

	<!-- 특정 강의의 리뷰를 가져오는 메서드 -->
	<select id="getReviewsByCourseId"
		resultType="org.mywork.stitchbe.dto.ReviewDTO">
		SELECT review_id, education_rating, instructor_rating, facility_rating,
		atmosphere_rating, management_rating, later_rating
		FROM reviews
		WHERE course_id = #{courseId}
	</select>

	<!-- 로그인한 사용자의 리뷰를 가져오는 메서드 -->
	<select id="getReviewsByUserId"
		resultType="org.mywork.stitchbe.dto.ReviewDTO">
		SELECT
		r.review_id AS reviewId,
		r.member_id AS memberId,
		r.course_id AS courseId,
		c.academy_id AS academyId,
		r.education,
		r.education_rating AS educationRating,
		r.instructor,
		r.instructor_rating AS instructorRating,
		r.facility,
		r.facility_rating AS facilityRating, 
		r.atmosphere,
		r.atmosphere_rating AS atmosphereRating, 
		r.management,
		r.management_rating AS managementRating,
		r.later,
		r.later_rating AS laterRating, 
		r.regdate AS regDate, 
        c.course_name AS courseName,  -- 코스 이름에 별칭 추가
        a.academy_name AS academyName -- 학원 이름에 별칭 추가
		FROM
		REVIEW r
		LEFT JOIN
		COURSE c ON r.course_id = c.course_id
		LEFT JOIN
		ACADEMY a ON c.academy_id = a.academy_id
		WHERE
		r.member_id = #{memberId}
	</select>

   <!-- 모든 리뷰를 가져오는 메서드 -->
    <select id="getAllReviews" resultType="org.mywork.stitchbe.dto.ReviewDTO">
        SELECT
        r.REVIEW_ID AS reviewId,
        r.MEMBER_ID AS memberId,
        r.COURSE_ID AS courseId,
        r.EDUCATION AS education,
        r.EDUCATION_RATING AS educationRating,
        r.INSTRUCTOR AS instructor,
        r.INSTRUCTOR_RATING AS instructorRating,
        r.FACILITY AS facility,
        r.FACILITY_RATING AS facilityRating,
        r.ATMOSPHERE AS atmosphere,
        r.ATMOSPHERE_RATING AS atmosphereRating,
        r.MANAGEMENT AS management,
        r.MANAGEMENT_RATING AS managementRating,
        r.LATER AS later,
        r.LATER_RATING AS laterRating,
        r.EDUCATION_SPEC AS educationSpec,
        r.EMPLOYMENT_STATUS AS employmentStatus,
        r.REGDATE AS regDate,
        r.EDITDATE AS editDate,
        m.NICKNAME AS nickname  <!-- 회원 닉네임 가져오기 -->

        FROM REVIEW r
        JOIN MEMBER m ON r.MEMBER_ID = m.MEMBER_ID  <!-- 리뷰와 회원을 조인 -->
    </select>


	<!-- 홈: 인기 리뷰 가져오는 메서드 -->
	<select id="getTopLikedReviews"
		resultType="org.mywork.stitchbe.dto.home.ReviewLikesDTO">
		SELECT
		r.review_id AS reviewId,
		r.course_id AS courseId,
		c.course_name AS courseName,
		c.academy_id AS academyId,
		r.member_id AS memberId,
		r.education AS educationReview,
		r.instructor AS instructorReview,
		r.facility AS facilityReview,
		r.atmosphere AS atmosphereReview,
		r.management AS managementReview,
		r.later AS laterReview,

		-- 전체 평균 별점
		(r.education_rating + r.instructor_rating + r.facility_rating +
		r.atmosphere_rating + r.management_rating + r.later_rating) / 6 AS averageRating,

		COUNT(l.like_id) AS likeCount -- 좋아요 수 계산

		FROM review r
		LEFT JOIN course c ON r.course_id = c.course_id -- course 조인
		LEFT JOIN likes l ON r.review_id = l.review_id -- 좋아요와 조인
		GROUP BY
		r.review_id, r.course_id, c.course_name, c.academy_id,
		r.member_id, r.education, r.instructor, r.facility,
		r.atmosphere, r.management, r.later, r.regdate,
		r.education_rating, r.instructor_rating, r.facility_rating,
		r.atmosphere_rating, r.management_rating, r.later_rating
		ORDER BY
		likeCount DESC NULLS LAST, -- 좋아요 순으로 정렬하고 NULL 값을 마지막으로
		r.regdate DESC NULLS LAST -- 최신 리뷰 순 정렬하고 NULL 값을 마지막으로
		FETCH FIRST 3 ROWS ONLY
	</select>

    <!-- 리뷰 삭제 메서드. -->
    <delete id="deleteReview" parameterType="long">
        DELETE FROM REVIEW WHERE REVIEW_ID = #{reviewId}
    </delete>


</mapper>
