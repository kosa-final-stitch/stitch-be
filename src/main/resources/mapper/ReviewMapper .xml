<?xml version="1.0" encoding="UTF-8" ?>
<!--
 2024.9.17 박요한 | getTopLikedReviews 추가
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.mywork.stitchbe.mapper.ReviewMapper">

	<!-- 리뷰 삽입 -->
	<insert id="insertReview"
		parameterType="org.mywork.stitchbe.dto.ReviewDTO">
		INSERT INTO REVIEW (
		review_id, member_id, course_id, education, education_rating, instructor,
		instructor_rating,
		facility, facility_rating, atmosphere, atmosphere_rating, management,
		management_rating,
		later, later_rating, regdate, editdate
		) VALUES (
		REVIEW_SEQ.NEXTVAL,
		#{memberId, jdbcType=VARCHAR},
		#{courseId, jdbcType=NUMERIC},
		#{education, jdbcType=VARCHAR},
		#{educationRating, jdbcType=NUMERIC},
		#{instructor, jdbcType=VARCHAR},
		#{instructorRating, jdbcType=NUMERIC},
		#{facility, jdbcType=VARCHAR},
		#{facilityRating, jdbcType=NUMERIC},
		#{atmosphere, jdbcType=VARCHAR},
		#{atmosphereRating, jdbcType=NUMERIC},
		#{management, jdbcType=VARCHAR},
		#{managementRating, jdbcType=NUMERIC},
		#{later, jdbcType=VARCHAR},
		#{laterRating, jdbcType=NUMERIC},
		#{regDate, jdbcType=TIMESTAMP},
		#{editDate, jdbcType=TIMESTAMP}
		)
	</insert>

	<!-- 특정 강의의 리뷰를 가져오는 메서드 -->
	<select id="getReviewsByCourseId"
		resultType="org.mywork.stitchbe.dto.ReviewDTO">
		SELECT * FROM REVIEW WHERE course_id = #{courseId}
	</select>


	<!-- 모든 리뷰를 가져오는 메서드 -->
	<!-- <select id="getAllReviews" resultType="org.mywork.stitchbe.dto.ReviewDTO"> 
		SELECT * FROM REVIEW </select> -->


    <!-- 홈: 인기 리뷰 가져오는 메서드  -->
    <select id="getTopLikedReviews" resultType="org.mywork.stitchbe.dto.home.ReviewLikesDTO">
        SELECT
            r.review_id AS reviewId,
            r.course_id AS courseId,
            c.course_name AS courseName,
            c.academy_id AS academyId,
            r.member_id AS memberId,
            r.education AS educationReview,
            r.instructor AS instructorReview,
            r.facility AS facilityReview,
            r.atmosphere AS atmosphereReview,
            r.management AS managementReview,
            r.later AS laterReview,

            -- 전체 평균 별점
            (r.education_rating + r.instructor_rating + r.facility_rating +
             r.atmosphere_rating + r.management_rating + r.later_rating) / 6 AS averageRating,

            COUNT(l.like_id) AS likeCount  -- 좋아요 수 계산

        FROM review r
                 LEFT JOIN course c ON r.course_id = c.course_id  -- course 조인
                 LEFT JOIN likes l ON r.review_id = l.review_id  -- 좋아요와 조인
        GROUP BY
            r.review_id, r.course_id, c.course_name, c.academy_id,
            r.member_id, r.education, r.instructor, r.facility,
            r.atmosphere, r.management, r.later, r.regdate,
            r.education_rating, r.instructor_rating, r.facility_rating,
            r.atmosphere_rating, r.management_rating, r.later_rating
        ORDER BY
            likeCount DESC NULLS LAST,  -- 좋아요 순으로 정렬하고 NULL 값을 마지막으로
            r.regdate DESC NULLS LAST   -- 최신 리뷰 순 정렬하고 NULL 값을 마지막으로
            FETCH FIRST 3 ROWS ONLY
    </select>


</mapper>
